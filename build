#!/usr/bin/env bash

build() {
	declare build_files="${*:-versions/**/options}"

	for file in $build_files; do
        ( # shellcheck source=versions/stock-VV/options
		source "$file"
		local version_dir
		version_dir="$(dirname "$file")"
		: "${TAGS:?}" "${RELEASE:?}" "${DOWNLOAD:?}" "${PACKAGES}"

		for tag in "${TAGS[@]}"; do
			docker build -t "$tag" \
			--build-arg ALPINE_VERSION=${RELEASE} \
            --build-arg ALPINE_DOWNLOAD=${DOWNLOAD} \
            --build-arg ALPINE_PACKAGES=${PACKAGES} \
			--build-arg VCS_REF=`git rev-parse --short HEAD` \
			--build-arg BUILD_DATE=`date -u +"%Y-%m-%dT%H:%M:%SZ"` \
			--build-arg VERSION=`date -u +"%Y.%m.%d.%H:%MZ"` .

			if [[ "$CIRCLE_BUILD_NUM" ]]; then
				{
					mkdir -p images \
					&& docker tag -f "$tag" "${tag}-${CIRCLE_BUILD_NUM}" \
					&& docker save "${tag}-${CIRCLE_BUILD_NUM}" \
						| gzip -c > "images/${tag//\//_}-${CIRCLE_BUILD_NUM}.tar.gz" \
					&& docker rmi "${tag}-${CIRCLE_BUILD_NUM}"
				} || true
			fi
		done )
	done
}

run_tests() {
	declare build_files="${*:-versions/**/options}"
	declare -a test_files
	for file in $build_files; do
		# shellcheck source=versions/stock-3.3/options
		source "$file"
		local tag
		tag="${TAGS[0]}" tag="${tag//:/-}" tag="${tag//\//_}"
		test_files+=("test/test_${tag}.bats")
	done
	bats "${test_files[@]}"
}

push() {
	[[ "$CIRCLE_BRANCH" == "release" ]] || return 0
	[[ "$NO_PUSH" ]] && return 0

	declare build_files="${*:-versions/**/options}"
	for file in $build_files; do
		( #shellcheck source=versions/stock-3.3/options
		source "$file"
		for tag in "${TAGS[@]}"; do
			if docker history "$tag" &> /dev/null; then
				[[ "$PUSH_IMAGE" ]] && docker push "$tag"
			fi
		done
		exit 0 )
	done
}

main() {
	set -eo pipefail; [[ "$TRACE" ]] && set -x
	declare cmd="$1"
	case "$cmd" in
		test)	shift;	run_tests "$@";;
		push)	shift;	push "$@";;
		*)		build "$@";;
	esac
}

main "$@"
